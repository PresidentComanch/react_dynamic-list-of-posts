{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["API_URL","get","url","fetch","then","response","json","getPosts","ending","PostsList","selectedUserId","selectedPostId","selectPostIdGuard","useState","posts","setPosts","useEffect","userId","postsFromServer","className","map","post","title","type","onClick","id","NewCommentForm","postId","loadComments","name","setName","email","setEmail","newComment","setNewComment","onSubmit","event","preventDefault","body","method","headers","JSON","stringify","addComment","value","placeholder","required","onChange","currentTarget","PostDetails","setPost","comments","setComments","showComments","setShowComments","commentsFromServer","commentsByPostId","filter","comment","postFromServer","length","commentId","App","setSelectedUserId","setSelectedPostId","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a02f95c7.chunk.js","sourcesContent":["import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\nexport const API_URL = 'https://mate.academy/students-api';\n\nexport function get<T>(url: string): Promise<T> {\n  return fetch(`${API_URL}${url}`)\n    .then(response => response.json());\n}\n\nexport function getPosts(ending: string) {\n  return get<Post[]>(`/posts${ending}`);\n}\n\nexport function getPostComments() {\n  return get<Comment[]>('/comments');\n}\n\nexport function deleteComment(commentId: number) {\n  return fetch(`${API_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addComment(\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<Comment> {\n  return fetch(`${API_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json; charset=utf-8' },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  })\n    .then(response => response.json());\n}\n","import { Post } from '../types/Post';\nimport { get, getPosts } from './api';\n\nexport const getUserPosts = (userId: number) => {\n  if (userId === 0) {\n    return getPosts('');\n  }\n\n  return getPosts(`?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return get<Post>(`/posts/${postId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPostId: number;\n  selectPostIdGuard: (selectedPostId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectedPostId,\n  selectPostIdGuard,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getUserPosts(selectedUserId)\n      .then(postsFromServer => {\n        setPosts(postsFromServer);\n      });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map((post: Post) => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPostIdGuard(+post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/api';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  loadComments: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, loadComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [newComment, setNewComment] = useState('');\n\n  const postComment = (event: { preventDefault: () => void; }) => {\n    event.preventDefault();\n\n    addComment(postId, name, email, newComment)\n      .then(loadComments)\n      .then(() => {\n        setName('');\n        setEmail('');\n        setNewComment('');\n      });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={postComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          onChange={event => setName(event.currentTarget.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setEmail(event.currentTarget.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={newComment}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setNewComment(event.currentTarget.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getPostComments } from '../../api/api';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState(true);\n\n  const loadComments = () => {\n    getPostComments()\n      .then(commentsFromServer => {\n        const commentsByPostId = commentsFromServer\n          .filter(comment => comment.postId === selectedPostId);\n\n        setComments(commentsByPostId);\n      });\n  };\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then((postFromServer: Post) => {\n        setPost(postFromServer);\n      });\n    loadComments();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    loadComments();\n  }, []);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            return (showComments) ? setShowComments(false) : setShowComments(true);\n          }}\n        >\n          {(showComments) ? (\n            `Hide ${comments.length} comment${(comments.length > 1) ? 's' : ''}`\n          ) : (\n            `Show ${comments.length} comment${(comments.length > 1) ? 's' : ''}`\n          )}\n        </button>\n        {showComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li key={comment?.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment?.id)\n                    .then(loadComments)}\n                >\n                  X\n                </button>\n                <p>{comment?.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            loadComments={loadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectPostIdGuard = (postId: number) => {\n    return (postId === selectedPostId) ? setSelectedPostId(0) : setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            selectPostIdGuard={selectPostIdGuard}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}